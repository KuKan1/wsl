package com.wsl.wjw;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;
import java.util.Set;

public class Test {

	static String val = "{worker.datasource.url=jdbc:oracle:thin:@(DESCRIPTION  =  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.85)(PORT  =  1521))(ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.87)(PORT  =  1521))(LOAD_BALANCE=on)(FAILOVER=on)(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=cwjs)(FAILOVER_MODE=(TYPE=session)(METHOD=basic)(RETRIES=180)(DELAY=5)))), interface.queryGetCustInfo=http://hades-common-api/common/api/v1/crm/clientInfo/, worker.datasource.maxActive=10, busi.datasource.url=jdbc:oracle:thin:@(DESCRIPTION  =  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.85)(PORT  =  1521))(ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.87)(PORT  =  1521))(LOAD_BALANCE=on)(FAILOVER=on)(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=cwjs)(FAILOVER_MODE=(TYPE=session)(METHOD=basic)(RETRIES=180)(DELAY=5)))), worker.datasource.maxWait=1800, interface.queryLedBackAdjustWocode=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/ledBackByWocodeAdjust, spring.datasource.validationQuery=SELECT 1 FROM DUAL, interface.queryNetBalanceList=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryNetBalanceList, interface.queryJournalDetail=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryLedApJournalDetailList, worker.datasource.username=hades_cod, zkConfig.zkConnectString=10.10.130.45:2181,10.10.130.46:2181,10.10.130.47:2181,10.10.130.57:2181,10.10.130.58:2181, interface.queryLegalHoliday=http://hades-internet-api/internet/api/v1/legalHoliday/, busi.datasource.testOnReturn=false, interface.updateledInDetailbyMutil=http://hades-fm-ops/hades/fm/api/v1/multiBill/updatemultiBill, interface.queryCorpsMap=http://hades-common-api/common/api/v1/corpInfo/subCorpsToMap, zkConfig.userName=ScheduleAdmin, busi.datasource.password=******, interface.updateledInDetailInfo=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/updateLedInDetailInfo, worker.datasource.maxIdle=10, interface.queryCorpInfo=http://hades-common-api/common/api/v1/corpInfo/subCorps/, busi.datasource.testOnBorrow=false, spring.datasource.url=jdbc:oracle:thin:@(DESCRIPTION  =  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.85)(PORT  =  1521))(ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.87)(PORT  =  1521))(LOAD_BALANCE=on)(FAILOVER=on)(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=cwjs)(FAILOVER_MODE=(TYPE=session)(METHOD=basic)(RETRIES=180)(DELAY=5)))), interface.ledInDetailInfo=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryLedInDetailList, interface.multiBillInfo=http://hades-fm-ops/hades/fm/api/v1/multiBillInfo/, interface.queryLedLoanDetailRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryLedLoanDetailList, interface.queryAdjustList=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryAdjustList, zkConfig.zkSessionTimeout=60000, worker.datasource.minIdle=2, worker.datasource.initialSize=1, busi.datasource.username=hades_cod, interface.queryRefAtAndArCod=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryRepLedList, interface.queryLedApNormalList=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/selectLedAPNormalList, spring.datasource.minEvictableIdleTimeMillis=300000, nterface.queryLedBack=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/ledBackByDay, worker.datasource.minEvictableIdleTimeMillis=300000, interface.queryDeductPayByPlatfomApprTime=http://hades-ar-ops/ar/ops/v1/codLed/queryDeductPayByPlatfomApprTime, interface.queryLedBackDetail=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/ledBackByWocode, interface.branchCompanyToMap=http://hades-common-api/common/api/v1/corpInfo/branchCompanyToMap/1, interface.queryDeductPayByWoCode=http://hades-ar-ops/ar/ops/v1/codLed/queryDeductPayByWoCode, interface.ledInDetailbyMutil=http://hades-fm-ops/hades/fm/api/v1/multiBill/multiBillList, spring.datasource.password=******, busi.datasource.initialSize=1, zkConfig.rootPath=/taobao-pamirs-schedule/hades-cod-repw, interface.queryLedApNormal=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryLedApNormal, busi.datasource.maxWait=1800, busi.datasource.timeBetweenEvictionRunsMillis=600000, busi.datasource.maxActive=10, worker.datasource.testOnReturn=false, worker.datasource.timeBetweenEvictionRunsMillis=600000, zkConfig.isCheckParentPath=true, spring.datasource.maxWait=1800, interface.queryArAdjustRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryArAdjustList, interface.queryNbDetail=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryledNbDetailByWoCode, spring.datasource.username=hades_cod, interface.queryNrRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryNrList, spring.datasource.testOnReturn=false, interface.queryledInSum=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/selectLedInSumInfo, worker.datasource.testOnBorrow=false, busi.datasource.minEvictableIdleTimeMillis=300000, busi.datasource.validationQuery=SELECT 1 FROM DUAL, busi.datasource.maxIdle=10, spring.datasource.testWhileIdle=true, interface.corpInfoByIdUsingGET=http://hades-common-api/common/api/v1/corpInfo/, interface.queryPayCod=http://hades-ar-ops/ar/ops/v1/codLed/queryDeductPayByCorpID, spring.datasource.maxIdle=10, interface.queryLedBackByConTime=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/selectLedBackByConTime, busi.datasource.testWhileIdle=true, spring.datasource.testOnBorrow=false, spring.application.name=hades-cod-repw, zkConfig.password=******, spring.datasource.initialSize=1, interface.queryBackRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryBackList, worker.datasource.validationQuery=SELECT 1 FROM DUAL, eureka.client.serviceUrl.defaultZone=http://10.10.128.51:9000/eureka/,http://10.10.128.51:9000/eureka/, busi.datasource.minIdle=2, spring.datasource.maxActive=10, spring.datasource.timeBetweenEvictionRunsMillis=600000, worker.datasource.testWhileIdle=true, interface.queryNbWoCode=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryledNbDetailList, spring.datasource.minIdle=2, interface.queryACRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryAcList, worker.datasource.password=******}";

	static String val2 = "worker.datasource.url=jdbc:oracle:thin:@(DESCRIPTION  =  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.85)(PORT  =  1521))(ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.87)(PORT  =  1521))(LOAD_BALANCE=on)(FAILOVER=on)(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=cwjs)(FAILOVER_MODE=(TYPE=session)(METHOD=basic)(RETRIES=180)(DELAY=5)))), interface.queryGetCustInfo=http://hades-common-api/common/api/v1/crm/clientInfo/, worker.datasource.maxActive=10, busi.datasource.url=jdbc:oracle:thin:@(DESCRIPTION  =  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.85)(PORT  =  1521))(ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.87)(PORT  =  1521))(LOAD_BALANCE=on)(FAILOVER=on)(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=cwjs)(FAILOVER_MODE=(TYPE=session)(METHOD=basic)(RETRIES=180)(DELAY=5)))), worker.datasource.maxWait=1800, interface.queryLedBackAdjustWocode=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/ledBackByWocodeAdjust, spring.datasource.validationQuery=SELECT 1 FROM DUAL, interface.queryNetBalanceList=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryNetBalanceList, interface.queryJournalDetail=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryLedApJournalDetailList, worker.datasource.username=hades_cod, zkConfig.zkConnectString=10.10.130.45:2181,10.10.130.46:2181,10.10.130.47:2181,10.10.130.57:2181,10.10.130.58:2181, interface.queryLegalHoliday=http://hades-internet-api/internet/api/v1/legalHoliday/, busi.datasource.testOnReturn=false, interface.updateledInDetailbyMutil=http://hades-fm-ops/hades/fm/api/v1/multiBill/updatemultiBill, interface.queryCorpsMap=http://hades-common-api/common/api/v1/corpInfo/subCorpsToMap, zkConfig.userName=ScheduleAdmin, busi.datasource.password=******, interface.updateledInDetailInfo=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/updateLedInDetailInfo, worker.datasource.maxIdle=10, interface.queryCorpInfo=http://hades-common-api/common/api/v1/corpInfo/subCorps/, busi.datasource.testOnBorrow=false, spring.datasource.url=jdbc:oracle:thin:@(DESCRIPTION  =  (ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.85)(PORT  =  1521))(ADDRESS  =  (PROTOCOL  =  TCP)(HOST  =  10.10.127.87)(PORT  =  1521))(LOAD_BALANCE=on)(FAILOVER=on)(CONNECT_DATA=(SERVER=DEDICATED)(SERVICE_NAME=cwjs)(FAILOVER_MODE=(TYPE=session)(METHOD=basic)(RETRIES=180)(DELAY=5)))), interface.ledInDetailInfo=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryLedInDetailList, interface.multiBillInfo=http://hades-fm-ops/hades/fm/api/v1/multiBillInfo/, interface.queryLedLoanDetailRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryLedLoanDetailList, interface.queryAdjustList=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryAdjustList, zkConfig.zkSessionTimeout=60000, worker.datasource.minIdle=2, worker.datasource.initialSize=1, busi.datasource.username=hades_cod, interface.queryRefAtAndArCod=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryRepLedList, interface.queryLedApNormalList=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/selectLedAPNormalList, spring.datasource.minEvictableIdleTimeMillis=300000, nterface.queryLedBack=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/ledBackByDay, worker.datasource.minEvictableIdleTimeMillis=300000, interface.queryDeductPayByPlatfomApprTime=http://hades-ar-ops/ar/ops/v1/codLed/queryDeductPayByPlatfomApprTime, interface.queryLedBackDetail=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/ledBackByWocode, interface.branchCompanyToMap=http://hades-common-api/common/api/v1/corpInfo/branchCompanyToMap/1, interface.queryDeductPayByWoCode=http://hades-ar-ops/ar/ops/v1/codLed/queryDeductPayByWoCode, interface.ledInDetailbyMutil=http://hades-fm-ops/hades/fm/api/v1/multiBill/multiBillList, spring.datasource.password=******, busi.datasource.initialSize=1, zkConfig.rootPath=/taobao-pamirs-schedule/hades-cod-repw, interface.queryLedApNormal=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryLedApNormal, busi.datasource.maxWait=1800, busi.datasource.timeBetweenEvictionRunsMillis=600000, busi.datasource.maxActive=10, worker.datasource.testOnReturn=false, worker.datasource.timeBetweenEvictionRunsMillis=600000, zkConfig.isCheckParentPath=true, spring.datasource.maxWait=1800, interface.queryArAdjustRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryArAdjustList, interface.queryNbDetail=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryledNbDetailByWoCode, spring.datasource.username=hades_cod, interface.queryNrRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryNrList, spring.datasource.testOnReturn=false, interface.queryledInSum=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/selectLedInSumInfo, worker.datasource.testOnBorrow=false, busi.datasource.minEvictableIdleTimeMillis=300000, busi.datasource.validationQuery=SELECT 1 FROM DUAL, busi.datasource.maxIdle=10, spring.datasource.testWhileIdle=true, interface.corpInfoByIdUsingGET=http://hades-common-api/common/api/v1/corpInfo/, interface.queryPayCod=http://hades-ar-ops/ar/ops/v1/codLed/queryDeductPayByCorpID, spring.datasource.maxIdle=10, interface.queryLedBackByConTime=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/selectLedBackByConTime, busi.datasource.testWhileIdle=true, spring.datasource.testOnBorrow=false, spring.application.name=hades-cod-repw, zkConfig.password=******, spring.datasource.initialSize=1, interface.queryBackRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryBackList, worker.datasource.validationQuery=SELECT 1 FROM DUAL, eureka.client.serviceUrl.defaultZone=http://10.10.128.51:9000/eureka/,http://10.10.128.51:9000/eureka/, busi.datasource.minIdle=2, spring.datasource.maxActive=10, spring.datasource.timeBetweenEvictionRunsMillis=600000, worker.datasource.testWhileIdle=true, interface.queryNbWoCode=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryledNbDetailList, spring.datasource.minIdle=2, interface.queryACRep=http://hades-repw-sync/hades/repw/sync/api/v1/codRepDetail/queryAcList, worker.datasource.password=******";

	public static void main(String[] args) throws IOException {
		InputStream   inStream   =   new   ByteArrayInputStream(val2.getBytes());   
		Properties pro=new Properties();

        //将输入流载入properties对象中

        pro.load(inStream);
        System.out.println(pro.keys()+"  "+pro.getProperty("worker.datasource.url"));



	}
}
